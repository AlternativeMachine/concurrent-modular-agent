{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Concurrent Modular Agent Documentation","text":"<p>Version: 0.0.0</p> <p>For full documentation visit mkdocs.org. </p> <p>Concurrent Modular Agent (CoMA) is a framework for building modular agents that can work concurrently. It allows developers to create agents that can perform multiple things simultaneously as concurrent modules. This makes the way of building agents a bit different from the traditional way of building agents as workflows. </p> <p>To get started with CoMA, you can follow the steps in Getting Started.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>Concurrent Modular Agent (CoMA) is a framework to build agents that are assemled from multiple modules, inspired by living systems. It allows you to create agents that can perform complex tasks by combining concurrently working simple modules, each responsible for a specific function. </p>"},{"location":"getting-started/creating-a-new-project/","title":"2. Creating a New Project","text":"<p>CoMA is designed with a project-oriented approach, where you create modules and assemble them into agents within a project. You can choose between two project styles:</p> <ol> <li> <p>CoMA Interface Project: Write module definitions and run them as a single agent using the <code>coma run</code> command. This is the simplest way to use CoMA.</p> </li> <li> <p>Python Interface Project: Write module and agent definitions and run multiple agents using the <code>python</code> command. This is the most flexible approach.</p> </li> </ol>"},{"location":"getting-started/creating-a-new-project/#project-structure","title":"Project Structure","text":"<p>Regardless of the project style, you create a new project by simply making a directory.</p>"},{"location":"getting-started/creating-a-new-project/#coma-interface-project-structure","title":"CoMA Interface Project Structure","text":"<p>For CoMA Interface Projects, the directory contains agent subdirectories, each storing the module definitions that comprise that agent:</p> <pre><code>sample_project/    # Project directory\n\u251c\u2500\u2500 agent1/        # Agent directory\n\u2502   \u251c\u2500\u2500 module1.py # Defines module1\n\u2502   \u251c\u2500\u2500 module2.py # Defines module2\n\u2502   \u2514\u2500\u2500 module3.py # Defines module3\n\u2514\u2500\u2500 agent2/        # Another agent directory\n    \u251c\u2500\u2500 module1.py # Defines module1\n    \u251c\u2500\u2500 module2.py # Defines module2\n    \u2514\u2500\u2500 module3.py # Defines module3\n</code></pre>"},{"location":"getting-started/creating-a-new-project/#python-interface-project-structure","title":"Python Interface Project Structure","text":"<p>For Python Interface Projects, the directory contains both module definitions and agent scripts:</p> <pre><code>sample_project/ # Project directory\n\u251c\u2500\u2500 module1.py  # Defines module1\n\u251c\u2500\u2500 module2.py  # Defines module2\n\u251c\u2500\u2500 module3.py  # Defines module3\n\u251c\u2500\u2500 agent1.py   # Defines an agent using modules 1, 2, and 3\n\u2514\u2500\u2500 agent2.py   # Defines another agent using modules 1, 2, and 3\n</code></pre>"},{"location":"getting-started/creating-a-new-project/#getting-started","title":"Getting Started","text":"<p>We'll begin with the CoMA Interface Project style, which is simpler and more straightforward for beginners. If you're already familiar with Python and want more flexibility, you can skip ahead to learn about the Python Interface Project style.</p>"},{"location":"getting-started/creating-a-new-project/#next-steps","title":"Next Steps","text":"<p>Let's create your first CoMA project and start building modules!</p>          \ud83d\ude80 Creating Modules (CoMA Interface)"},{"location":"getting-started/creating-modules/","title":"3. Creating Modules (CoMA Interface)","text":""},{"location":"getting-started/creating-modules/#building-your-first-modules","title":"Building Your First Modules","text":"<p>In this section, we'll create three simple modules that demonstrate the core concepts of CoMA modules. These modules will work together to build a simple chat application that responds to user input.</p> <p>We'll create the following modules:</p> <ol> <li><code>user_input</code>: Receives user input and sends it to the <code>chat</code> module</li> <li><code>chat</code>: Receives messages from the <code>user_input</code> module and responds to the user</li> <li><code>memory_organizer</code>: Organizes the agent's memory in the background</li> </ol> <p></p>"},{"location":"getting-started/creating-modules/#setting-up-your-project","title":"Setting Up Your Project","text":""},{"location":"getting-started/creating-modules/#create-the-project-structure","title":"Create the Project Structure","text":"<p>First, create a directory for your project and agent:</p> <pre><code>mkdir -p my_project/agent1\n</code></pre>"},{"location":"getting-started/creating-modules/#create-your-first-module-file","title":"Create Your First Module File","text":"<p>Create a file named <code>user_input.py</code> in the <code>my_project/agent1</code> directory:</p> <pre><code>touch my_project/agent1/user_input.py\n</code></pre>"},{"location":"getting-started/creating-modules/#creating-the-user-input-module","title":"Creating the User Input Module","text":"<p>Open <code>user_input.py</code> in your text editor and add the following code:</p> <pre><code># my_project/agent1/user_input.py\nimport time\nimport concurrent_modular_agent as coma\n\n@coma.module_main('user_input')\ndef mod_user_input(agent: coma.AgentInterface):\n    while True:                              # continuously run this module\n        m = input(\"User: \")\n        if len(m) == 0 or m.isspace() or m is None:  # if the user input is empty, skip to the next iteration\n            continue\n        agent.state.add(f\"user_message:{m}\")\n        agent.message.send(\"chat\", \"reply to user\")  # send message to the \"chat\" module\n        time.sleep(3)                        # wait for 3 seconds before next input\n</code></pre> <p>This module continuously receives user input. When a user enters a message, it: 1. Adds the message to the agent's state (shared memory) 2. Sends a message to the <code>chat</code> module to generate a reply</p>"},{"location":"getting-started/creating-modules/#understanding-the-module-code","title":"Understanding the Module Code","text":"<p>Let's examine the key components:</p> <p>Module Declaration: <pre><code>@coma.module_main('user_input')\ndef mod_user_input(agent: coma.AgentInterface):\n</code></pre> The <code>@coma.module_main(module_name)</code> decorator creates an <code>AgentInterface</code> object with the specified module name. This object provides access to state management and messaging functionality.</p> <p>Continuous Operation: <pre><code>while True:\n    ...\n    time.sleep(3)\n</code></pre> This loop keeps the module running continuously, with a 3-second delay between inputs to prevent overwhelming the user.</p> <p>Input Handling: <pre><code>m = input(\"User: \")\nif len(m) == 0 or m.isspace() or m is None:\n    continue\n</code></pre> The module captures user input and skips empty or whitespace-only entries.</p> <p>State Management: <pre><code>agent.state.add(f'user_message:{m}')\n</code></pre> The state is a shared memory space where modules store and retrieve information. Here, we add the user's message with a <code>user_message:</code> prefix.</p> <p>Inter-Module Communication: <pre><code>agent.message.send(\"chat\", \"reply to user\")\n</code></pre> This sends a message to the <code>chat</code> module, triggering it to generate a response.</p>"},{"location":"getting-started/creating-modules/#creating-the-chat-module","title":"Creating the Chat Module","text":"<p>Create the chat module file:</p> <pre><code>touch my_project/agent1/chat.py\n</code></pre> <p>Add the following code to <code>chat.py</code>:</p> <pre><code># my_project/agent1/chat.py\nimport concurrent_modular_agent as coma\nfrom openai import OpenAI\n\n@coma.module_main('chat')\ndef mod_response_to_user(agent: coma.AgentInterface):\n    openai_client = OpenAI()\n    while True:\n        m = agent.message.receive()\n        if m is None:\n            continue  # If no message is received, skip to the next iteration\n\n        messages = [\n            {\"role\": \"developer\", \"content\": \"You are a module of an autonomous agent. Your job is to respond to the user's input. You are expected to talk with the user. You are not an AI assistant, so feel free to talk freely. You do not need to help humans. You received the following messages from the user, other modules. Talk to the user in a natural way.\"},\n        ]\n\n        for s in agent.state.get(max_count=10).texts[::-1]:\n            if s.startswith(\"user_message:\"):\n                messages.append({\"role\": \"user\", \"content\": s[len(\"user_message:\"):]})\n            elif s.startswith(\"assistant_message:\"):\n                messages.append({\"role\": \"assistant\", \"content\": s[len(\"assistant_message:\"):]})\n\n        messages.append({\"role\": \"assistant\", \"content\": f\"{m}\"})\n\n        completion = openai_client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=messages,\n        )\n\n        output_message = completion.choices[0].message.content\n        print(f'ChatBot: {output_message}')\n        agent.state.add(f\"assistant_message:{output_message}\")\n\n        agent.message.send(\"user_input\", 'chat response finished')\n</code></pre>"},{"location":"getting-started/creating-modules/#understanding-the-chat-module","title":"Understanding the Chat Module","text":"<p>Message-Driven Activation: <pre><code>while True:\n    m = agent.message.receive()\n    if m is None:\n        continue\n</code></pre> The module waits for messages from other modules (like <code>user_input</code>) before activating.</p> <p>LLM Integration: <pre><code>openai_client = OpenAI()\ncompletion = openai_client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=messages,\n)\n</code></pre> The module uses OpenAI's API to generate responses.</p> <p>State Retrieval: <pre><code>for s in agent.state.get(max_count=10).texts[::-1]:\n    if s.startswith(\"user_message:\"):\n        messages.append({\"role\": \"user\", \"content\": s[len(\"user_message:\"):]})\n    elif s.startswith(\"assistant_message:\"):\n        messages.append({\"role\": \"assistant\", \"content\": s[len(\"assistant_message:\"):]})\n</code></pre> The module retrieves recent conversation history from the shared state to provide context to the LLM.</p> <p>Response Output: <pre><code>output_message = completion.choices[0].message.content\nprint(f'ChatBot: {output_message}')\nagent.state.add(f\"assistant_message:{output_message}\")\n</code></pre> The generated response is displayed to the user and stored in the shared state.</p>"},{"location":"getting-started/creating-modules/#creating-the-memory-organizer-module","title":"Creating the Memory Organizer Module","text":"<p>Create the memory organizer file:</p> <pre><code>touch my_project/agent1/memory_organizer.py\n</code></pre> <p>Add the following code:</p> <pre><code># my_project/agent1/memory_organizer.py\nimport time\nimport random\nimport concurrent_modular_agent as coma\nfrom openai import OpenAI\n\n@coma.module_main('memory_organizer')\ndef mod_organize_memory(agent: coma.AgentInterface):\n    openai_client = OpenAI()\n    while True:\n        time.sleep(100)  # Wait for 100 seconds between memory organization cycles\n\n        messages = [\n            {\"role\": \"developer\", \"content\": \"You are a module of an autonomous agent. Your job is to organize the memory of the agent. You are expected to organize the memory of the agent in a way that is helpful to recall the past and what the agent had thought. You will be given a list of memory entries from the user and other modules.\"},\n        ]\n\n        organizing_range = random.randint(5, 10)  # Randomly decide how many messages to organize\n        recent_states = agent.state.get(max_count=organizing_range).texts[-organizing_range:]\n\n        for s in recent_states:\n            if s.startswith(\"user_message:\"):\n                messages.append({\"role\": \"user\", \"content\": s[len(\"user_message:\"):]})\n            elif s.startswith(\"assistant_message:\"):\n                messages.append({\"role\": \"assistant\", \"content\": s[len(\"assistant_message:\"):]})\n\n        completion = openai_client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=messages,\n        )\n\n        output_message = completion.choices[0].message.content\n        agent.state.add(f'memory_summary:{output_message}')\n</code></pre>"},{"location":"getting-started/creating-modules/#understanding-the-memory-organizer","title":"Understanding the Memory Organizer","text":"<p>Background Operation: <pre><code>while True:\n    time.sleep(100)  # Wait for 100 seconds between cycles\n</code></pre> This module runs independently in the background, periodically organizing the agent's memory.</p> <p>Random Memory Selection: <pre><code>organizing_range = random.randint(5, 10)\nrecent_states = agent.state.get(max_count=organizing_range).texts[::-1]\n</code></pre> The module randomly selects 5-10 recent memory entries to organize, adding variety to the memory organization process.</p> <p>Concurrent Operation: The <code>memory_organizer</code> module runs concurrently with the other modules. While <code>user_input</code> and <code>chat</code> modules interact directly with each other, the memory organizer works independently to maintain and organize the agent's memory in the background.</p>"},{"location":"getting-started/creating-modules/#next-steps","title":"Next Steps","text":"<p>Now that you've created your three modules, you're ready to run your first CoMA agent! Continue to the next section to learn how to execute your agent and see it in action.</p>          \ud83d\ude80 Running the Agent"},{"location":"getting-started/getting-started/","title":"Getting Started","text":"<p>This guide walks you through the essential steps to get started with CoMA: installation, project setup, module creation, module connections, and running your agent.</p>"},{"location":"getting-started/getting-started/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Installation</li> <li>Creating a New Project</li> <li>Creating Modules</li> <li>Running the Agent</li> </ol> <p>Let's begin with the installation process.</p>          \ud83d\ude80 Start Installation"},{"location":"getting-started/installation/","title":"1. Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing CoMA, ensure you have the following prerequisites:</p> <ul> <li> <p>Python 3.12 or later</p> <p>CoMA uses multiprocessing and asyncio, which are fully supported in Python 3.12 and later versions.</p> </li> <li> <p>Docker</p> <p>CoMA uses Docker to run modules (specifically, MQTT for messaging and ChromaDB for vector storage). Ensure you have Docker installed and running on your machine. Please refer to the Docker installation guide for instructions.</p> </li> </ul>"},{"location":"getting-started/installation/#setup","title":"Setup","text":"<p>It is recommended to use a virtual environment:</p> <pre><code>$ python -m venv .venv\n$ source .venv/bin/activate\n</code></pre> <p>Install the required packages:</p> <pre><code>$ pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#testing-your-installation","title":"Testing Your Installation","text":""},{"location":"getting-started/installation/#1-start-backend-services","title":"1. Start Backend Services","text":"<pre><code>$ coma backend start\n</code></pre> <p>Note: You need to run Docker before starting the backend services.</p> <p>Tip for macOS users: You need to run the Docker Desktop application, not CLI commands.</p> <p>You can use the <code>start</code>, <code>stop</code>, and <code>restart</code> commands to manage the backend services. For example, to stop the backend services:</p> <pre><code>$ coma backend stop\n</code></pre>"},{"location":"getting-started/installation/#2-set-your-openai-api-key","title":"2. Set Your OpenAI API Key","text":"<pre><code>$ export OPENAI_API_KEY=\"your_api_key\"\n</code></pre>"},{"location":"getting-started/installation/#3-run-tests","title":"3. Run Tests","text":"<pre><code>$ pytest\n</code></pre> <p>If all tests pass, you should see output similar to: <pre><code>....\n</code></pre></p> <p>If tests fail, you will see output indicating which tests failed or encountered errors: <pre><code>..!!!\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now you're ready to start building your agent systems with CoMA! Continue to the next section to learn how to create your first project.</p>          \ud83d\ude80 Creating Projects"},{"location":"getting-started/running-the-agent/","title":"4. Running the Agent","text":"<p>Let's run the assembly of the modules you have created as an agent!</p> <p>Actually, running the agent is as simple as running a single command. </p> <p>First, make sure you have directory structure like this:</p> <p><pre><code>my_project/\n\u2514\u2500\u2500 agent1\n    \u251c\u2500\u2500 user_input.py\n    \u251c\u2500\u2500 chat.py\n    \u2514\u2500\u2500 memory_organizer.py\n</code></pre> If you have skipped the previous steps, you can go to <code>examples/coma_interface</code> directory.</p> <p>Also, Docker should be running on your machine, as CoMA uses Docker to run the backend services. <pre><code>$ coma backend start\n</code></pre></p> <p>Then, run the following command in the <code>my_project</code> directory:</p> <pre><code>$ coma run agent1\n</code></pre> <p>This command will start the agent named <code>agent1</code>, which will automatically load the modules you have created in the <code>agent1</code> directory.  You should see the output similar to this:</p> <pre><code>User: \n</code></pre> <p>You can now type a message and see how the agent responds.</p> <pre><code>User: Hi\nChatBot: Hey again! What's new with you?\nUser: Can I call you CoMA agent?\nChatBot: Sure, you can call me CoMA agent if you like! It has an intriguing ring to it. What's next on your list?\nUser: What is your name?\nChatBot: I don't really have a name, but you can call me whatever you like! CoMA agent, perhaps? Or maybe something else that suits your fancy.\n</code></pre> <p>As you can see, the agent remembers the conversation history and responds accordingly. Recall that the user input is retrieved from the memory by the <code>chat</code> module, not sent directly to the <code>chat</code> module, but still the agent can respond to the user input in a natural way. This means memory is working properly. </p> <p>After spent some time chatting with the agent, you can see the existence of the memory more clearly. </p> <pre><code>User: What have we talked?\nChatBot: We\u2019ve been chatting about dinosaurs! We started with some imaginative stories about these fascinating prehistoric creatures, like the massive Brachiosaurus and the fierce Tyrannosaurus rex. Then, we moved on to discussing why dinosaurs went extinct, touching on the asteroid impact theory and volcanic activities. If you have anything else you\u2019re curious about, feel free to ask!\n</code></pre> <p>However, this tutorial did not cover more advanced memory retrieval techniques, such as using similarity search.  We will cover this in other tutorials later, so stay tuned!</p> <p>For this getting started tutorial, you have successfully created a simple agent that can chat with the user and remember the conversation history. Well done!</p>"}]}